#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Dec  1 12:54:32 2021

@author: tangyuechen
"""

import cvxpy as cp

N = cp.Variable((4, 6), integer  = True) # store1
M = cp.Variable((4, 6), integer  = True) # store2
P = cp.Variable(6, integer  = True)
D = cp.Variable(2, boolean = True)


obj_func = 7.99 * (N[0,0]+N[0,1]+N[0,2]+N[0,3]+N[0,4]+N[0,5]) + 13.99 * (N[1,0]+N[1,1]+N[1,2]+N[1,3]+N[1,4]+N[1,5]) + 17.99 * (N[2,0]+N[2,1]+N[2,2]+N[2,3]+N[2,4]+N[2,5]) + 19.99 * (N[3,0]+N[3,1]+N[3,2]+N[3,3]+N[3,4]+N[3,5]) + 8.99 * (M[0,0]+M[0,1]+M[0,2]+M[0,3]+M[0,4]+M[0,5]) + 10.99 * (M[1,0]+M[1,1]+M[1,2]+M[1,3]+M[1,4]+M[1,5]) + 12.99 * (M[2,0]+M[2,1]+M[2,2]+M[2,3]+M[2,4]+M[2,5]) + 15.25 * (M[3,0]+M[3,1]+M[3,2]+M[3,3]+M[3,4]+M[3,5]) + 2 * (M[0,3] + M[1,3] + M[2,3] + M[3,3] + M[0,4] + M[1,4] + M[2,4] + M[3,4]) + 3.99 * D[0] + 6.99 * D[1]


constraints = []

constraints.append(P[0]== 3)
constraints.append(P[1]== 3)
constraints.append(P[2]== 5)
constraints.append(P[3]== 3)
constraints.append(P[4]== 6)
constraints.append(P[5]== 3)

for i in [0,1,2,3,4,5] :
    constraints.append(2 * (N[0,i] + M[0,i]) + 3 * (N[1,i] + M[1,i]) + 4 * (N[2,i] + M[2,i]) + 5 * (N[3,i] + M[3,i]) >= P[i])

constraints.append(D[0] <= N[0,0]+N[0,1]+N[0,2]+N[0,3]+N[0,4]+N[0,5] + N[1,0]+N[1,1]+N[1,2]+N[1,3]+N[1,4]+N[1,5] 
                   + N[2,0]+N[2,1]+N[2,2]+N[2,3]+N[2,4]+N[2,5] + N[3,0]+ N[3,1]+ N[3,2]+ N[3,3]+ N[3,4]+ N[3,5])
constraints.append(D[1] <= M[0,0]+M[0,1]+M[0,2]+M[0,3]+M[0,4]+M[0,5] + M[1,0]+M[1,1]+M[1,2]+M[1,3]+M[1,4]+M[1,5] 
                   + M[2,0]+M[2,1]+M[2,2]+M[2,3]+M[2,4]+M[2,5] + M[3,0]+ M[3,1]+ M[3,2]+ M[3,3]+ M[3,4]+ M[3,5])
constraints.append(D[0] >= (N[0,0]+N[0,1]+N[0,2]+N[0,3]+N[0,4]+N[0,5] + N[1,0]+N[1,1]+N[1,2]+N[1,3]+N[1,4]+N[1,5] 
                            + N[2,0]+N[2,1]+N[2,2]+N[2,3]+N[2,4]+N[2,5] + N[3,0]+ N[3,1]+ N[3,2]+ N[3,3]+ N[3,4]+ N[3,5])/1000)
constraints.append(D[1] >= (M[0,0]+M[0,1]+M[0,2]+M[0,3]+M[0,4]+M[0,5] + M[1,0]+M[1,1]+M[1,2]+M[1,3]+M[1,4]+M[1,5] 
                            + M[2,0]+M[2,1]+M[2,2]+M[2,3]+M[2,4]+M[2,5] + M[3,0]+ M[3,1]+ M[3,2]+ M[3,3]+ M[3,4]+ M[3,5])/1000)

for n in [0,1,2,3]:
    for i in [0,1,2,3,4,5]:
        constraints.append(N[n,i]>=0)
        constraints.append(M[n,i]>=0)

problem = cp.Problem(cp.Minimize(obj_func), constraints)
problem.solve(solver=cp.GUROBI,verbose = True)

print("obj_func =")
print(obj_func.value)
print("N =")
print(N.value)
print("M =")
print(M.value)
print("P =")
print(P.value)
print("D =")
print(D.value)
